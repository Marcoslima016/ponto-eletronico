import 'package:flutter/material.dart';
import 'package:flutter_recognize/src/src.imports.dart';
import 'package:get/get.dart';
import 'package:ptem2/core/core.imports.dart';

import '../../../totem.imports.dart';

class UserMock implements UserRecognize {
  @override
  int id;

  @override
  List prediction;

  @override
  int timestampLastDetection;
  //

  UserMock({
    @required this.id,
    @required this.prediction,
    @required this.timestampLastDetection,
  });
}

class RecognitionAuthController {
  //

  RecognizeAuthController recognizeAuthController;

  //======================================================== INIT ========================================================

  Future init() async {
    await Future.delayed(const Duration(milliseconds: 500), () {});

    List<UserRecognize> users = TotemController.instance.colabListManager.colabList;

    recognizeAuthController = RecognizeAuthController(onAuthenticate: this.onFaceAuth);

    //******************** MOCK ********************

    // try {
    //   int qtdItemsMock = 100;

    //   for (int i = 0; i <= qtdItemsMock; i++) {
    //     users.add(
    //       Colab(
    //         prediction: predictionMock,
    //         trabalhadorId: i + 10000,
    //         timestampLastDetection: 0,
    //       ),
    //     );
    //   }
    // } catch (e) {
    //   print("########################################  ERRO: " + e.toString());
    // }

    //*********************************************/

    await FlutterRecognize.instance.auth(
      controller: recognizeAuthController,
      users: users,
      cameraFrame: homeFrameV2,
      onClickEmergencyButton: () async {
        PontoVirtual.instance.totemController.tentarRegistrarPontoViaMatricula();
      },
    );
  }

  //==================================================== ON FACE AUTH ====================================================

  Future onFaceAuth({UserRecognize user}) async {
    //
    await TotemController.instance.colabListManager.setColabLastDetectionTS(
      id: user.id,
      timestamp: DateTime.now().millisecondsSinceEpoch,
    );

    for (Colab colab in TotemController.instance.colabListManager.colabList) {
      if (colab.id == user.id) {
        await TotemController.instance.usecaseBatidasHandler.tentarRegistrarBatidaViaColab(colab: colab);
      }
    }

    await recognizeAuthController.restart();

    var p = "";
  }
}

List predictionMock = [
  -0.006343331187963486,
  0.019349072128534317,
  0.010619428008794785,
  -0.015883365646004677,
  -0.056923311203718185,
  0.0854320302605629,
  -0.11223285645246506,
  -0.05144105106592178,
  -0.08037357032299042,
  0.020826520398259163,
  -0.009526165202260017,
  0.01311462465673685,
  -0.008717847056686878,
  0.019547447562217712,
  -0.0024207127280533314,
  -0.024683881551027298,
  -0.04299867898225784,
  -0.008484444580972195,
  0.008073472417891026,
  0.0037597978953272104,
  -0.012014609761536121,
  0.1194857805967331,
  0.05672221630811691,
  0.010835890658199787,
  0.02011261321604252,
  0.0078070987947285175,
  -0.034945353865623474,
  -0.0001241336576640606,
  0.33312129974365234,
  -0.08453437685966492,
  -0.009364919736981392,
  0.17037560045719147,
  0.1508200764656067,
  -0.0033533270470798016,
  -0.1952468603849411,
  0.15210379660129547,
  0.07851281762123108,
  -0.006942953914403915,
  0.0014851195737719536,
  0.030814599245786667,
  0.0023410639259964228,
  0.0029780224431306124,
  0.007653607986867428,
  -0.014355160295963287,
  0.013218523934483528,
  -0.0688348263502121,
  -0.021226981654763222,
  0.07336240261793137,
  -0.0055664037354290485,
  0.03864790126681328,
  -0.08521341532468796,
  -0.003351049032062292,
  -0.07951953262090683,
  -0.003512421390041709,
  -0.0969780758023262,
  -0.002951121423393488,
  -0.10170020163059235,
  0.004232865758240223,
  -0.11989059299230576,
  0.0187993161380291,
  0.10943523049354553,
  -0.09499118477106094,
  -0.010413273237645626,
  0.04753920063376427,
  -0.00524885905906558,
  0.03700374811887741,
  -0.008534413762390614,
  -0.023286648094654083,
  0.009493292309343815,
  0.002531495876610279,
  -0.028645647689700127,
  -0.15612538158893585,
  -0.12322666496038437,
  0.025178030133247375,
  -0.12929455935955048,
  0.008550846017897129,
  -0.0007588485605083406,
  0.001288741477765143,
  0.10822948813438416,
  -0.04206440597772598,
  -0.010665062814950943,
  -0.0506017729640007,
  -0.013089660555124283,
  0.11469468474388123,
  -0.10285479575395584,
  -0.004380974918603897,
  -0.01538351271301508,
  -0.04076290875673294,
  0.015040982514619827,
  -0.20554225146770477,
  -0.14391767978668213,
  0.0031999920029193163,
  0.0051169442012906075,
  -0.006626359652727842,
  -0.0367717370390892,
  -0.07755030691623688,
  -0.031202469021081924,
  0.03944595530629158,
  -0.00966352503746748,
  0.00553913926705718,
  0.00787325669080019,
  -0.011237289756536484,
  -0.002602624474093318,
  0.00147875992115587,
  -0.0029484580736607313,
  0.011043023318052292,
  -0.11056843400001526,
  0.00579749746248126,
  0.020592236891388893,
  0.020119883120059967,
  0.11873754858970642,
  0.003829775843769312,
  0.002354265656322241,
  0.14587897062301636,
  0.007613681722432375,
  0.04792990908026695,
  0.01037574838846922,
  -0.019096672534942627,
  -0.019913433119654655,
  -0.06059941649436951,
  0.062478724867105484,
  0.014028718695044518,
  -0.0530649870634079,
  -0.0024953680112957954,
  0.005187537521123886,
  0.005558727774769068,
  0.0021071266382932663,
  0.0013744602911174297,
  -0.00656321132555604,
  0.13269759714603424,
  0.0073268176056444645,
  0.020040985196828842,
  0.0014530885964632034,
  0.028915606439113617,
  0.04545032978057861,
  -0.011431741528213024,
  -0.3020649552345276,
  -0.00826220028102398,
  -0.001284607918933034,
  0.019765838980674744,
  -0.006522934418171644,
  -0.0065655941143631935,
  -0.0017335439333692193,
  -0.14947043359279633,
  -0.03229231387376785,
  0.12926091253757477,
  -0.011971445754170418,
  0.000703797850292176,
  0.004306147340685129,
  0.002013877034187317,
  -0.005873651709407568,
  -0.13188080489635468,
  -0.08869712799787521,
  -0.018625136464834213,
  -0.013751376420259476,
  -0.0011822473024949431,
  0.011247766204178333,
  0.0034863727632910013,
  -0.09330715239048004,
  -0.0034372175578027964,
  -0.036415062844753265,
  0.0034191799350082874,
  -0.006684258580207825,
  -0.004522701259702444,
  -0.000021484418539330363,
  0.025129014626145363,
  0.020679721608757973,
  0.2496967762708664,
  -0.008517672307789326,
  -0.005486904177814722,
  -0.029057646170258522,
  0.022049257531762123,
  -0.0034459882881492376,
  -0.08274497091770172,
  0.016193458810448647,
  0.0028786994516849518,
  -0.07417578995227814,
  -0.10920426994562149,
  -0.012986359186470509,
  0.001572683802805841,
  -0.20002558827400208,
  0.035830412060022354,
  0.000994781730696559,
  -0.0025806277990341187,
  0.0502348318696022,
  0.008498342707753181,
  0.041199684143066406,
  0.15281806886196136,
  -0.1581718772649765,
  -0.07269443571567535,
  -0.07286699116230011,
  0.005963515490293503,
];
